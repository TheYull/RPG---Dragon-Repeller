let xp = 0;
let health = 100;
let gold = 50;
let currentWeapon = 0;
let fighting;
let monsterHealth;
let inventory = ["–ø–∞–ª–∏—Ü—è"];

const button1 = document.querySelector("#button1");
const button2 = document.querySelector("#button2");
const button3 = document.querySelector("#button3");
const text = document.querySelector("#text");
const xpText = document.querySelector("#xpText");
const healthText = document.querySelector("#healthText");
const goldText = document.querySelector("#goldText");
const monsterStats = document.querySelector("#monsterStats");
const monsterName = document.querySelector("#monsterName");
const monsterHealthText = document.querySelector("#monsterHealth");
const weapons = [
  { name: "–ø–∞–ª–∏—Ü—è", power: 5 },
  { name: "–∫–∏–Ω–¥–∂–∞–ª", power: 30 },
  { name: "–º–æ–ª–æ—Ç–æ–∫ –∑ –∫—ñ–≥—Ç—è–º–∏", power: 50 },
  { name: "–º–µ—á", power: 100 },
];
const monsters = [
  {
    name: "—Å–ª–∏–∑",
    level: 2,
    health: 15,
  },
  {
    name: "—ñ–∫–ª–∞—Å—Ç–∏–π –∑–≤—ñ—Ä",
    level: 8,
    health: 60,
  },
  {
    name: "–¥—Ä–∞–∫–æ–Ω",
    level: 20,
    health: 300,
  },
];
const locations = [
  {
    name: "–º—ñ—Å—å–∫–∞ –ø–ª–æ—â–∞",
    "button text": [
      "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É",
      "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–µ—á–µ—Ä–∏",
      "–ë–∏–π—Å—è –∑ –¥—Ä–∞–∫–æ–Ω–æ–º",
    ],
    "button functions": [goStore, goCave, fightDragon],
    text: '–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –º—ñ—Å—å–∫—ñ–π –ø–ª–æ—â—ñ. –í–∏ –±–∞—á–∏—Ç–µ –≤–∏–≤—ñ—Å–∫—É –∑ –Ω–∞–ø–∏—Å–æ–º "–ú–∞–≥–∞–∑–∏–Ω".',
  },
  {
    name: "–º–∞–≥–∞–∑–∏–Ω",
    "button text": [
      "–ö—É–ø–∏—Ç–∏ 10 –∑–¥–æ—Ä–æ–≤'—è (10 –∑–æ–ª–æ—Ç–∏—Ö)",
      "–ö—É–ø–∏—Ç–∏ –∑–±—Ä–æ—é (30 –∑–æ–ª–æ—Ç–∏—Ö)",
      "–ô—Ç–∏ –Ω–∞ –º—ñ—Å—å–∫—É –ø–ª–æ—â—É",
    ],
    "button functions": [buyHealth, buyWeapon, goTown],
    text: "–í–∏ –∑–∞—Ö–æ–¥–∏—Ç–µ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É.",
  },
  {
    name: "–ø–µ—á–µ—Ä–∞",
    "button text": [
      "–ë–æ—Ä–æ—Ç–∏—Å—å –∑—ñ —Å–ª–∏–∑–æ–º",
      "–ë–æ—Ä–æ—Ç–∏—Å—å –∑ —ñ–∫–ª–∞—Å—Ç–∏–º –∑–≤—ñ—Ä–æ–º",
      "–í–∏–π—Ç–∏ –Ω–∞ –º—ñ—Å—å–∫—É –ø–ª–æ—â—É",
    ],
    "button functions": [fightSlime, fightBeast, goTown],
    text: "–í–∏ –≤—Ö–æ–¥–∏—Ç–µ –≤ –ø–µ—á–µ—Ä—É. –ë–∞—á–∏—Ç–µ  –º–æ–Ω—Å—Ç—Ä—ñ–≤.",
  },
  {
    name: "–±–æ—Ä–æ—Ç—å–±–∞",
    "button text": ["–ê—Ç–∞–∫—É–≤–∞—Ç–∏", "–£—Ö–∏–ª–∏—Ç–∏—Å—è", "–í—Ç–µ–∫—Ç–∏"],
    "button functions": [attack, dodge, goTown],
    text: "–í–∏ –±–æ—Ä–µ—Ç–µ—Å—è –∑ –º–æ–Ω—Å—Ç—Ä–æ–º.",
  },
  {
    name: "–≤–±–∏—Ç–∏ –º–æ–Ω—Å—Ç—Ä–∞",
    "button text": [
      "–ô–¥—ñ—Ç—å –Ω–∞ –º—ñ—Å—å–∫—É –ø–ª–æ—â—É",
      "–ô–¥—ñ—Ç—å –Ω–∞ –º—ñ—Å—å–∫—É –ø–ª–æ—â—É",
      "–ô–¥—ñ—Ç—å –Ω–∞ –º—ñ—Å—å–∫—É –ø–ª–æ—â—É",
    ],
    "button functions": [goTown, goTown, easterEgg],
    text: '–ü–æ–º–∏—Ä–∞—é—á–∏, –º–æ–Ω—Å—Ç—Ä –∫—Ä–∏—á–∏—Ç—å "–ê–≥—Ä—Ä!". –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –±–∞–ª–∏ –¥–æ—Å–≤—ñ–¥—É —ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ –∑–æ–ª–æ—Ç–æ.',
  },
  {
    name: "–ø—Ä–æ–≥—Ä–∞—à",
    "button text": ["–ü–û–í–¢–û–†–ò–¢–ò?", "–ü–û–í–¢–û–†–ò–¢–ò?", "–ü–û–í–¢–û–†–ò–¢–ò?"],
    "button functions": [restart, restart, restart],
    text: "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏. ‚ò†Ô∏è",
  },
  {
    name: "–ø–µ—Ä–µ–º–æ–≥–∞",
    "button text": ["–ü–û–í–¢–û–†–ò–¢–ò?", "–ü–û–í–¢–û–†–ò–¢–ò?", "–ü–û–í–¢–û–†–ò–¢–ò?"],
    "button functions": [restart, restart, restart],
    text: "–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏ –¥—Ä–∞–∫–æ–Ω–∞! –í–ò –í–ò–ì–†–ê–õ–ò –ì–†–£! üéâ",
  },
  {
    name: "–ø–∞—Å—Ö–∞–ª—å–Ω–µ —è–π—Ü–µ",
    "button text": ["2", "8", "–ü—ñ—Ç–∏ –Ω–∞ –º—ñ—Å—å–∫—É –ø–ª–æ—â—É?"],
    "button functions": [pickTwo, pickEight, goTown],
    text: "–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ —Ç–∞—î–º–Ω—É –≥—Ä—É. –í–∏–±–µ—Ä—ñ—Ç—å —á–∏—Å–ª–æ –≤–∏—â–µ. –î–µ—Å—è—Ç—å —á–∏—Å–µ–ª –±—É–¥—É—Ç—å –æ–±—Ä–∞–Ω—ñ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º —á–∏–Ω–æ–º –≤—ñ–¥ 0 –¥–æ 10. –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–µ –≤–∞–º–∏ —á–∏—Å–ª–æ –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ –æ–¥–Ω–∏–º —ñ–∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª, –≤–∏ –≤–∏–≥—Ä–∞–ª–∏!",
  },
];

// initialize buttons
button1.onclick = goStore;
button2.onclick = goCave;
button3.onclick = fightDragon;

function update(location) {
  monsterStats.style.display = "none";
  button1.innerText = location["button text"][0];
  button2.innerText = location["button text"][1];
  button3.innerText = location["button text"][2];
  button1.onclick = location["button functions"][0];
  button2.onclick = location["button functions"][1];
  button3.onclick = location["button functions"][2];
  text.innerText = location.text;
}

function goTown() {
  update(locations[0]);
}

function goStore() {
  update(locations[1]);
}

function goCave() {
  update(locations[2]);
}

function buyHealth() {
  if (gold >= 10) {
    gold -= 10;
    health += 10;
    goldText.innerText = gold;
    healthText.innerText = health;
  } else {
    text.innerText = "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–ª–æ—Ç–∞, —â–æ–± –∫—É–ø–∏—Ç–∏ –∑–¥–æ—Ä–æ–≤'—è.";
  }
}

function buyWeapon() {
  if (currentWeapon < weapons.length - 1) {
    if (gold >= 30) {
      gold -= 30;
      currentWeapon++;
      goldText.innerText = gold;
      let newWeapon = weapons[currentWeapon].name;
      text.innerText = "–¢–µ–ø–µ—Ä —É –≤–∞—Å —î " + newWeapon + ".";
      inventory.push(newWeapon);
      text.innerText += " –£ –≤–∞—à–æ–º—É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ —î " + inventory;
    } else {
      text.innerText = "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–æ–ª–æ—Ç–∞, —â–æ–± –∫—É–ø–∏—Ç–∏ –∑–±—Ä–æ—é.";
    }
  } else {
    text.innerText = "–í–∏ –≤–∂–µ –º–∞—î—Ç–µ –Ω–∞–π–ø–æ—Ç—É–∂–Ω—ñ—à—É –∑–±—Ä–æ—é!";
    button2.innerText = "–ü—Ä–æ–¥–∞—Ç–∏ –∑–±—Ä–æ—é –∑–∞ 15 –∑–æ–ª–æ—Ç–∏—Ö";
    button2.onclick = sellWeapon;
  }
}

function sellWeapon() {
  if (inventory.length > 1) {
    gold += 15;
    goldText.innerText = gold;
    let currentWeapon = inventory.shift();
    text.innerText = "–í–∏ –ø—Ä–æ–¥–∞–ª–∏ " + currentWeapon + ".";
    text.innerText += " –£ –≤–∞—à–æ–º—É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ —î: " + inventory;
  } else {
    text.innerText = "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç–∏ —Å–≤–æ—é —î–¥–∏–Ω—É –∑–±—Ä–æ—é!";
  }
}

function fightSlime() {
  fighting = 0;
  goFight();
}

function fightBeast() {
  fighting = 1;
  goFight();
}

function fightDragon() {
  fighting = 2;
  goFight();
}

function goFight() {
  update(locations[3]);
  monsterHealth = monsters[fighting].health;
  monsterStats.style.display = "block";
  monsterName.innerText = monsters[fighting].name;
  monsterHealthText.innerText = monsterHealth;
}

function attack() {
  text.innerText = "–ú–æ–Ω—Å—Ç—Ä - " + monsters[fighting].name + " –∞—Ç–∞–∫—É—î.";
  text.innerText +=
    " –í–∏ –∞—Ç–∞–∫—É—î—Ç–µ –π–æ–≥–æ —Å–≤–æ—ó–º " + weapons[currentWeapon].name + ".";
  health -= getMonsterAttackValue(monsters[fighting].level);
  if (isMonsterHit()) {
    monsterHealth -=
      weapons[currentWeapon].power + Math.floor(Math.random() * xp) + 1;
    healthText.innerText = health;
    monsterHealthText.innerText = monsterHealth;
  } else {
    text.innerText += " –í–∏ –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—è.";
  }

  if (health <= 0) {
    lose();
  } else if (monsterHealth <= 0) {
    fighting === 2 ? winGame() : defeatMonster();
  }

  if (Math.random() <= 0.1 && inventory.length !== 1) {
    text.innerText += " –í–∞—à " + inventory.pop() + " –ª–∞–º–∞—î—Ç—å—Å—è.";
    currentWeapon--;
  }
}

function getMonsterAttackValue(level) {
  const hit = level * 5 - Math.floor(Math.random() * xp);
  console.log(hit);
  return hit > 0 ? hit : 0;
}
function isMonsterHit() {
  return Math.random() > 0.2 || health < 20;
}

function dodge() {
  text.innerText = "–í–∏ —É—Ö–∏–ª—è—î—Ç–µ—Å—è –≤—ñ–¥ –∞—Ç–∞–∫–∏ –∑ –±–æ–∫—É " + monsters[fighting].name;
}

function defeatMonster() {
  gold += Math.floor(monsters[fighting].level * 6.7);
  xp += monsters[fighting].level;
  goldText.innerText = gold;
  xpText.innerText = xp;
  update(locations[4]);
}

function lose() {
  update(locations[5]);
}

function winGame() {
  update(locations[6]);
}

function restart() {
  xp = 0;
  health = 100;
  gold = 50;
  currentWeapon = 0;
  inventory = ["stick"];
  goldText.innerText = gold;
  healthText.innerText = health;
  xpText.innerText = xp;
  goTown();
}

function easterEgg() {
  update(locations[7]);
}
function pickTwo() {
  pick(2);
}
function pickEight() {
  pick(8);
}

function pick(guess) {
  const numbers = [];
  while (numbers.length < 10) {
    numbers.push(Math.floor(Math.random() * 11));
  }
  text.innerText = "–í–∏ –≤–∏–±—Ä–∞–ª–∏ " + guess + ". –û—Å—å –≤–∏–ø–∞–¥–∫–æ–≤—ñ —á–∏—Å–ª–∞:\n";
  for (let i = 0; i < 10; i++) {
    text.innerText += numbers[i] + "\n";
    if (numbers.includes(guess)) {
      text.innerText += "–ß—É–¥–æ–≤–æ! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ 20 –∑–æ–ª–æ—Ç–∏—Ö!";
      gold += 20;
      goldText.innerText = gold;
    } else {
      text.innerText += "–ù–µ –≤—ñ—Ä–Ω–æ! –í–∏ –≤—Ç—Ä–∞—á–∞—î—Ç–µ 10 –∑–¥–æ—Ä–æ–≤'—è!";
      health -= 10;
      healthText.innerText = health;
      if (health <= 0) {
        lose();
      }
    }
  }
}
